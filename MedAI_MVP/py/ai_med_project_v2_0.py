# -*- coding: utf-8 -*-
"""AI_med_project_v2.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AIQfrkmzf4hAJAz4Ot7Ya_A0fj6huNvR
"""

!python -m spacy download ru_core_news_sm

import pandas as pd
import numpy as np
import nltk
from nltk.tokenize import word_tokenize
from nltk.util import ngrams
import re
from nltk.corpus import stopwords
import spacy
from pymystem3 import Mystem
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score
from sklearn.impute import SimpleImputer

nltk.download("stopwords")
nltk.download('punkt')
nltk.download('wordnet')
nlp = spacy.load("ru_core_news_sm")
stop_words = set(stopwords.words("russian"))
mystem = Mystem()
tfidf_vectorizer = TfidfVectorizer()

pd.set_option('display.max_colwidth', None)
pd.set_option('display.max_rows', 15000)

from google.colab import drive
drive.mount('/content/drive')

try:
    df = pd.read_csv("/content/drive/MyDrive/data кванториум/reports.csv", sep = ';')
except FileNotFoundError:
    df = pd.read_csv("reports.csv", sep = ';')

df = df.rename(columns = dict((i, i.lower()) for i in list(df)))

df = df.rename(columns = {
    "medicalrecordkey" : "record_id",
    "medicalrecorddate" : "date",
    "patientkey" : "patient_id",
    "возраст" : 'age',
    "пол" : "sex",
    "специальностьврача" : "speciality_of_doctor",
    "жалобы" : "problems",
    "перенесенныезаболевания" : "past_illnesses",
    "перенесенныеоперации" : "postponed_operations",
    "принимаемыепрепараты" : "medicicals_taken"
})

df = df.drop('patient_id', axis=1)
df = df.drop('record_id', axis=1)
df = df.drop('date', axis=1)
df = df.drop('past_illnesses', axis=1)
df = df.drop('postponed_operations', axis=1)
df = df.drop('medicicals_taken', axis=1)

df = df.dropna(subset = 'sex')
df['sex'] = df['sex'].astype(int)

def del_dots_n_lower(text):
    if isinstance(text, str):
        return ' '.join(re.findall(r'\b\w+\b', text)).lower()
    else:
        return text

df = df.applymap(del_dots_n_lower)

def del_nums(text):
    if isinstance(text, str):
        return re.sub("[^\D]", "", text)
    else:
        return text

df["problems"] = df["problems"].apply(del_nums)

def del_short_words(text):
    if isinstance(text, str):
        return re.sub(r'\b\w{1,3}\b', '', text)
    else:
        return text

df["problems"] = df["problems"].apply(del_short_words)

def del_approval(text):
    if isinstance(text, str):
        return re.sub(r'подписано.*?помощи|информированное.*?помощи', '', text)
    else:
        return text

df["problems"] = df["problems"].apply(del_approval)

def del_no_complaints(text):
    if isinstance(text, str):
        if re.search(r'\b(нет|не предъявляет)\b', text, flags=re.IGNORECASE):
            return ''
    return text

df["problems"] = df["problems"].apply(del_no_complaints)

def convert_age(row):
  return row["age"] // 365
df['age'] = df.apply(convert_age, axis = 1)

df["speciality_of_doctor"] = df["speciality_of_doctor"].replace("заведующий кабинетом ", '', regex = True)
df["speciality_of_doctor"] = df["speciality_of_doctor"].replace("заведующий отделением ", '', regex = True)
df["speciality_of_doctor"] = df["speciality_of_doctor"].replace("руководитель центра ", '', regex = True)
df["speciality_of_doctor"] = df["speciality_of_doctor"].replace("зав отделением ", '', regex = True)
df["speciality_of_doctor"] = df["speciality_of_doctor"].replace(" процедурной", '', regex = True)
df["speciality_of_doctor"] = df["speciality_of_doctor"].replace("медицинская сестра", '', regex = True)
df["speciality_of_doctor"] = df["speciality_of_doctor"].replace("медицинский брат", '', regex = True)
df["speciality_of_doctor"] = df["speciality_of_doctor"].replace("заведюущий отделением ", '', regex = True)
df["speciality_of_doctor"] = df["speciality_of_doctor"].replace("зав  отделением ", '', regex = True)
df["speciality_of_doctor"] = df["speciality_of_doctor"].replace(" детский", '', regex = True)

df = df[df.speciality_of_doctor != ("врач терапевт" or "врач педиатр")]

empty_rows = df[df["problems"] == ""]
df = df.drop(empty_rows.index)

tfidf_vectorizer = TfidfVectorizer(max_features=1000, min_df=10, max_df=0.7, analyzer='word', ngram_range=(2, 4), token_pattern=r'\b[а-яА-Я]+\b')
tfidf_matrix = tfidf_vectorizer.fit_transform(df['problems'])
tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=tfidf_vectorizer.get_feature_names_out())
df = pd.concat([df, tfidf_df], axis=1)
df = df.drop('problems', axis=1)

df = df.dropna(subset=['speciality_of_doctor'])
df = df.dropna(subset=['активно предъявляет'])

X = df.drop('speciality_of_doctor', axis = 1)
y = df['speciality_of_doctor']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

imputer = SimpleImputer(strategy = 'most_frequent')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)

svm_model = SVC(kernel='linear')
svm_model.fit(X_train_imputed, y_train)

y_pred = svm_model.predict(X_test_imputed)

accuracy = accuracy_score(y_test, y_pred)
classification_report_result = classification_report(y_test, y_pred)

print(f"Точность: {accuracy}")
print(classification_report_result)